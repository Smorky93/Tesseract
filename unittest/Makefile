# Makefile for building Google Test and using it in tesseract tests
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.
#   make runtest - runs the programs listed under target runtest

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../googletest/googletest

# Where to find UNITTEST code.
UNITTEST_DIR = ../unittest

# Where to find Tesseract  code.
TESS_DIR = ..

# -I/usr/local/include/tesseract -I/usr/local/include/leptonica -L/usr/local/lib 

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include  -DUSE_STD_NAMESPACE

# Flags passed to the C++ compiler.
CXX = g++
CXXFLAGS += -g -Wall -Wextra -pthread -O2 -std=c++11

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Tesseract and Leptonica headers.  
TESS_HEADERS =  -I../ccstruct  -I../ccutil
                
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = sample1_unittest tesseracttests matrix_test

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary UNITTESTs its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

sample1.o : $(UNITTEST_DIR)/sample1.cc $(UNITTEST_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/sample1.cc

sample1_unittest.o : $(UNITTEST_DIR)/sample1_unittest.cc \
                     $(UNITTEST_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/sample1_unittest.cc

sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
  
# @stweil's empty test for tesseract  
  
 tesseracttests.o : $(UNITTEST_DIR)/tesseracttests.cpp \
 $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_DIR)/tesseracttests.cpp
  
 tesseracttests: tesseracttests.o gtest.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Ray's test for tesseract  - Needs link to tesseract headers
  
matrix_test.o : $(UNITTEST_DIR)/matrix_test.cc  \
                $(GTEST_HEADERS) 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TESS_HEADERS) -c $(UNITTEST_DIR)/matrix_test.cc

matrix_test : matrix_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -llept -ltesseract $^ -o $@
  
runtest : 
	./sample1_unittest
	./tesseracttests
	./matrix_test
  